#pragma once

namespace std
{
	template <typename T, T v>
	struct integral_constant
	{
		using value_type = T;
		using type = std::integral_constant<T, v>;

		static constexpr T value = v;

		constexpr operator value_type() const noexcept { return value; }
		constexpr value_type operator()() const noexcept { return value; }
	};

	template <bool B>
	using bool_constant = integral_constant<bool, B>;

	typedef integral_constant<bool, true> true_type;
	typedef integral_constant<bool, false> false_type;
}