#pragma once

#include <type_traits>

namespace std
{
	template <typename T>
	constexpr T&& forward(typename std::remove_reference_t<T>&& t) noexcept
	{
		return static_cast<T&&>(t);
	}

	template <typename T>
	constexpr T&& forward(typename std::remove_reference_t<T>& t) noexcept
	{
		return static_cast<T&&>(t);
	}

	template <typename T>
	constexpr remove_reference_t<T>&& move(T&& t) noexcept
	{
		return static_cast<remove_reference_t<T>&&>(t);
	}

	template <typename T>
	constexpr void swap(T& a, T& b) noexcept
	{
		T tmp = move(a);
		a = move(b);
		b = move(tmp);
	}

	template <typename T, size_t N>
	constexpr void swap(T (&a)[N], T (&b)[N]) noexcept
	{
		for (size_t i = 0; i < N; ++i)
		{
			swap(a[i], b[i]);
		}
	}
}