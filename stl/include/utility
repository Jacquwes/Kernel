#pragma once

#include <type_traits>

namespace std
{
    template <class T>
    constexpr T&& forward(typename std::remove_reference<T>::type&& t) noexcept
    {
        return static_cast<T&&>(t);
    }

    template <class T>
    constexpr T&& forward(typename std::remove_reference<T>::type& t) noexcept
    {
        return static_cast<T&&>(t);
    }
}