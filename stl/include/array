#pragma once

#include <algorithm>
#include <cstdint>
#include <iterator>
#include <utility>

namespace std
{
	template <typename T, size_t N>
	struct array
	{
		typedef T value_type;
		typedef size_t size_type;
		typedef ptrdiff_t difference_type;
		typedef value_type& reference;
		typedef const value_type& const_reference;
		typedef value_type* pointer;
		typedef const value_type* const_pointer;
		typedef pointer iterator;
		typedef const_pointer const_iterator;
		typedef std::reverse_iterator<iterator> reverse_iterator;
		typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

		constexpr reference at(size_type pos) { return _data[pos]; }
		constexpr const_reference at(size_type pos) const { return _data[pos]; }

		constexpr reference operator[](size_type pos) { return _data[pos]; }
		constexpr const_reference operator[](size_type pos) const { return _data[pos]; }

		constexpr reference front() { return _data[0]; }
		constexpr const_reference front() const { return _data[0]; }

		constexpr reference back() { return _data[N - 1]; }
		constexpr const_reference back() const { return _data[N - 1]; }

		constexpr T* data() noexcept { return _data; }
		constexpr const T* data() const noexcept { return _data; }

		constexpr iterator begin() noexcept { return _data; }
		constexpr const_iterator begin() const noexcept { return _data; }
		constexpr const_iterator cbegin() const noexcept { return _data; }

		constexpr iterator end() noexcept { return _data + N; }
		constexpr const_iterator end() const noexcept { return _data + N; }
		constexpr const_iterator cend() const noexcept { return _data + N; }

		constexpr reverse_iterator rbegin() noexcept { return reverse_iterator(end()); }
		constexpr const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(end()); }
		constexpr const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(end()); }

		constexpr reverse_iterator rend() noexcept { return reverse_iterator(begin()); }
		constexpr const_reverse_iterator rend() const noexcept { return const_reverse_iterator(begin()); }
		constexpr const_reverse_iterator crend() const noexcept { return const_reverse_iterator(begin()); }

		constexpr bool empty() const noexcept { return N == 0; }

		constexpr size_type size() const noexcept { return N; }

		constexpr size_type max_size() const noexcept { return N; }

		constexpr void fill(const T& value) { for (size_type i = 0; i < N; ++i) _data[i] = value; }

		constexpr void swap(array& other) noexcept { for (size_type i = 0; i < N; ++i) std::swap(_data[i], other._data[i]); }

	private:
		T _data[N];
	};

	template <typename T, size_t N>
	constexpr bool operator ==(const array<T, N>& left, const array<T, N>& right) { return std::equal(left.begin(), left.end(), right.begin()); }

	template <typename T, size_t N>
	constexpr bool operator !=(const array<T, N>& left, const array<T, N>& right) { return !std::equal(left.begin(), left.end(), right.begin()); }

	template <typename T, size_t N>
	constexpr bool operator <(const array<T, N>& left, const array<T, N>& right) { return std::lexicographical_compare(left.begin(), left.end(), right.begin(), right.end()); }

	template <typename T, size_t N>
	constexpr bool operator <=(const array<T, N>& left, const array<T, N>& right) { return !(right < left); }

	template <typename T, size_t N>
	constexpr bool operator >(const array<T, N>& left, const array<T, N>& right) { return right < left; }

	template <typename T, size_t N>
	constexpr bool operator >=(const array<T, N>& left, const array<T, N>& right) { return !(left < right); }

	template <size_t I, typename T, size_t N>
	constexpr T& get(std::array<T, N>& a) noexcept { static_assert(I < N, "Index out of bounds"); return a[I]; }

	template <size_t I, typename T, size_t N>
	constexpr T&& get(std::array<T, N>&& a) noexcept { static_assert(I < N, "Index out of bounds"); return move(a[I]); }

	template <size_t I, typename T, size_t N>
	constexpr const T& get(const std::array<T, N>& a) noexcept { static_assert(I < N, "Index out of bounds"); return a[I]; }

	template <size_t I, typename T, size_t N>
	constexpr const T&& get(const std::array<T, N>&& a) noexcept { static_assert(I < N, "Index out of bounds"); return move(a[I]); }

	template <typename T, size_t N>
	constexpr void swap(array<T, N>& left, array<T, N>& right) noexcept { left.swap(right); }

	template <typename T, size_t N>
	constexpr array<typename std::remove_cv_t<T>, N> to_array(T (&a)[N]) { return array<typename std::remove_cv_t<T>, N>(a); }

	template <typename T, size_t N>
	constexpr array<typename std::remove_cv_t<T>, N> to_array(T (&&a)[N]) { return array<typename std::remove_cv_t<T>, N>(move(a)); }
}
