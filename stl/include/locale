#pragma once

#include <array>
#include <cstdint>
#include <string>

namespace std
{
	class locale
	{
	public:
		class id;
		class facet;
		typedef int category;

		friend class facet;

	public:
		static constexpr category none = 0x0000;
		static constexpr category collate = 0x0001;
		static constexpr category ctype = 0x0002;
		static constexpr category monetary = 0x0004;
		static constexpr category numeric = 0x0008;
		static constexpr category time = 0x0010;
		static constexpr category messages = 0x0020;
		static constexpr category all = collate | ctype | monetary | numeric | time | messages;

	public:
		locale() noexcept;
		locale(locale const& other) noexcept;
		explicit locale(const char* std_name);
		explicit locale(string const& std_name);
		locale(locale const& other, const char* std_name, category cat);
		locale(locale const& other, string const& std_name, category cat);
		template <typename Facet>
		locale(locale const& other, Facet* f);
		locale(locale const& other, locale const& one, category cat);
		~locale();

		const locale& operator=(locale const& other) noexcept;

		template <typename Facet>
		locale combine(locale const& other) const;

		string name() const;

		bool operator ==(locale const& other) const;

		template <
			typename CharT,
			typename Traits,
			typename Allocator
		> bool operator ()(
			basic_string<CharT, Traits, Allocator> const& left,
			basic_string<CharT, Traits, Allocator> const& right
			) const;

		static locale global(locale const& loc);
		static locale const& classic();

	private:
		locale(string const& str, category cat);

		string _name;

		facet* _collate;
		facet* _ctype;
		facet* _monetary;
		facet* _numeric;
		facet* _time;
		facet* _messages;
	};

	class locale::id
	{
		friend class locale;

	public:
		id() = default;
		id(id const& other) = delete;
		id& operator=(id const& other) = delete;

	private:
		static size_t _id_count;
		size_t _id;
	};

	class locale::facet
	{
		friend class locale;

	public:
		explicit facet(size_t refs = 0);
		facet(facet const& other) = delete;

		facet& operator=(facet const& other) = delete;

	protected:
		virtual ~facet() = default;

	private:
		size_t _refs;
	};

	template <typename CharT>
	class collate : public locale::facet
	{
	public:
		typedef CharT char_type;
		typedef basic_string<char_type> string_type;

		explicit collate(size_t refs = 0);
		int compare(const char_type* low1, const char_type* high1, const char_type* low2, const char_type* high2) const;
		string_type transform(const char_type* low, const char_type* high) const;
		long hash(const char_type* beg, const char_type* end) const;

	protected:
		virtual ~collate() = default;
		virtual int do_compare(const char_type* low1, const char_type* high1, const char_type* low2, const char_type* high2) const;
		virtual string_type do_transform(const char_type* low, const char_type* high) const;
		virtual long do_hash(const char_type* beg, const char_type* end) const;
	};

	class ctype_base
	{
	public:
		typedef uint32_t mask;

		static constexpr mask space = 0x0001;
		static constexpr mask print = 0x0002;
		static constexpr mask cntrl = 0x0004;
		static constexpr mask upper = 0x0008;
		static constexpr mask lower = 0x0010;
		static constexpr mask alpha = 0x0020;
		static constexpr mask digit = 0x0040;
		static constexpr mask punct = 0x0080;
		static constexpr mask xdigit = 0x0100;
		static constexpr mask blank = 0x0200;
		static constexpr mask alnum = alpha | digit;
		static constexpr mask grapsh = alnum | punct;
	};

	template <typename CharT>
	class ctype : public locale::facet, public ctype_base
	{
	public:
		typedef CharT char_type;

		explicit ctype(size_t refs = 0);

		bool is(mask m, char_type c) const;
		const char_type* is(const char_type* low, const char_type* high, mask* vec) const;
		const char_type* scan_is(mask m, const char_type* low, const char_type* high) const;
		const char_type* scan_not(mask m, const char_type* low, const char_type* high) const;
		char_type toupper(char_type c) const;
		const char_type* toupper(char_type* low, const char_type* high) const;
		char_type tolower(char_type c) const;
		const char_type* tolower(char_type* low, const char_type* high) const;
		char_type widen(char c) const;
		const char* widen(const char* low, const char* high, char_type* to) const;
		char narrow(char_type c, char dfault) const;
		const char_type* narrow(const char_type* low, const char_type* high, char dfault, char* to) const;

	protected:
		~ctype() = default;

		virtual bool do_is(mask m, char_type c) const;
		virtual const char_type* do_is(const char_type* low, const char_type* high, mask* vec) const;
		const char_type* do_scan_is(mask m, const char_type* low, const char_type* high) const;
		const char_type* do_scan_not(mask m, const char_type* low, const char_type* high) const;
		char_type do_toupper(char_type c) const;
		const char_type* do_toupper(char_type* low, const char_type* high) const;
		char_type do_tolower(char_type c) const;
		const char_type* do_tolower(char_type* low, const char_type* high) const;
		char_type do_widen(char c) const;
		const char* do_widen(const char* low, const char* high, char_type* to) const;
		char do_narrow(char_type c, char dfault) const;
		const char_type* do_narrow(const char_type* low, const char_type* high, char dfault, char* to) const;
	};

	template <>
	class ctype<char> : public locale::facet, public ctype_base
	{
	public:
		typedef char char_type;

		static locale::id id;
		static size_t const table_size = 0x100;

		explicit ctype(const mask* tbl = 0, bool del = false, size_t refs = 0);

		const mask* table() const noexcept;
		static const mask* classic_table() noexcept;
		bool is(mask m, char c) const;
		const char* is(const char* low, const char* high, mask* vec) const;
		const char* scan_is(mask m, const char* low, const char* high) const;
		const char* scan_not(mask m, const char* low, const char* high) const;
		char toupper(char c) const;
		const char* toupper(char* low, const char* high) const;
		char tolower(char c) const;
		const char* tolower(char* low, const char* high) const;
		char widen(char c) const;
		const char* widen(const char* low, const char* high, char* to) const;
		char narrow(char c, char dfault) const;
		const char* narrow(const char* low, const char* high, char dfault, char* to) const;

	protected:
		~ctype();

		virtual bool do_is(mask m, char c) const;
		virtual const char* do_is(const char* low, const char* high, mask* vec) const;
		virtual const char* do_scan_is(mask m, const char* low, const char* high) const;
		virtual const char* do_scan_not(mask m, const char* low, const char* high) const;
		virtual char do_toupper(char c) const;
		virtual const char* do_toupper(char* low, const char* high) const;
		virtual char do_tolower(char c) const;
		virtual const char* do_tolower(char* low, const char* high) const;
		virtual char do_widen(char c) const;
		virtual const char* do_widen(const char* low, const char* high, char* to) const;
		virtual char do_narrow(char c, char dfault) const;
		virtual const char* do_narrow(const char* low, const char* high, char dfault, char* to) const;

	private:
		const mask* _table;
		bool _deletable;
	};
}