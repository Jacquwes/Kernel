#pragma once

#include <cstddef>
#include <type_traits>

namespace std
{
	template <typename Iter> struct iterator_traits {};

	struct input_iterator_tag {};
	struct output_iterator_tag {};
	struct forward_iterator_tag			: input_iterator_tag {};
	struct bidirectional_iterator_tag	: forward_iterator_tag {};
	struct random_access_iterator_tag	: bidirectional_iterator_tag {};

	template <typename T>
		requires is_object_v<T>
	struct iterator_traits<T*>
	{
		typedef ptrdiff_t					difference_type;
		typedef T							value_type;
		typedef T*							pointer;
		typedef T&							reference;
		typedef random_access_iterator_tag	iterator_category;
	};

	template <typename Iter>
	struct default_iterator
	{
		typedef Iter													   iterator_type;
		typedef typename iterator_traits<iterator_type>::value_type        value_type;
		typedef typename iterator_traits<iterator_type>::difference_type   difference_type;
		typedef typename iterator_traits<iterator_type>::pointer           pointer;
		typedef typename iterator_traits<iterator_type>::reference         reference;
		typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;

	private:
		iterator_type _iter;
	};
}