#pragma once

#include <cstdint>

namespace std
{
	typedef uint32_t streamsize;

	class ios_base
	{
	public:
		typedef uint32_t fmtflags;

		static constexpr fmtflags dec = 0x0001;
		static constexpr fmtflags oct = 0x0002;
		static constexpr fmtflags hex = 0x0004;
		static constexpr fmtflags basefield = dec | oct | hex;

		static constexpr fmtflags left = 0x0008;
		static constexpr fmtflags right = 0x0010;
		static constexpr fmtflags internal = 0x0020;
		static constexpr fmtflags adjustfield = left | right | internal;

		static constexpr fmtflags scientific = 0x0040;
		static constexpr fmtflags fixed = 0x0080;
		static constexpr fmtflags floatfield = scientific | fixed;

		static constexpr fmtflags boolalpha = 0x0100;
		static constexpr fmtflags showbase = 0x0200;
		static constexpr fmtflags showpoint = 0x0400;
		static constexpr fmtflags showpos = 0x0800;
		static constexpr fmtflags skipws = 0x1000;
		static constexpr fmtflags unitbuf = 0x2000;
		static constexpr fmtflags uppercase = 0x4000;

		ios_base(ios_base const&) = delete;
		virtual ~ios_base() = default;
		ios_base& operator=(ios_base const&) = delete;

		fmtflags flags() const;
		fmtflags flags(fmtflags fmtfl);

		fmtflags setf(fmtflags fmtfl);
		fmtflags setf(fmtflags fmtfl, fmtflags mask);

		void unsetf(fmtflags mask);

		streamsize precision() const;
		streamsize precision(streamsize new_precision);

		streamsize width() const;
		streamsize width(streamsize new_width);

	protected:
		ios_base() = default;

	private:
		fmtflags _fmtflags;
		streamsize _precision;
		streamsize _width;
	};
}